#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <time.h> 
#include <signal.h>
#include <errno.h>
// #include <limits>
#include <linux/limits.h>
 

#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/un.h>


#define PIPE_NAME "/tmp/suricata.rules"

// #define DEBUG 
#if defined(DEBUG) && DEBUG > 0
 	#define DEBUG_PRINT(fmt, args...) fprintf(stderr, "DEBUG: %s:%d:%s(): " fmt, \
    __FILE__, __LINE__, __func__, ##args)
#else
 	#define DEBUG_PRINT(fmt, args...) 
#endif

// 
// /home/lunix/suricat/suricata/src/detect-engine-loader.c:45   DETECT_MAX_RULE_SIZE 8192 
// /home/lunix/suricat/suricata/src/detect-engine-loader.c:134  но нужен не больше PIPE_BUF чтобы не нарушалась атомарность
// 
#define PLENG 8192
#if defined (PLENG)
	#define PIPE_SIZE PLENG
#else
	#define PIPE_SIZE PIPE_BUF 
#endif


#define LOCAL_STATE_DIR 
#define SOCKET_TARGET "/tmp/suricata.socket"
#define VERSION_MSG "{ \"version\": \"0.1\" }"

int reload()
{
	int sck;
	int ret;
	char buffer[512];
	
	sck = socket(AF_UNIX, SOCK_STREAM, 0);
	if (sck == -1) 
	{
		printf("Can not create socket: %s\n", strerror(errno));
	}
	
	struct sockaddr_un addr;
	addr.sun_family = AF_UNIX;
	strncpy(addr.sun_path, SOCKET_TARGET, sizeof(addr.sun_path));
	//strncpy(addr.sun_path, "/home/lunix/suricat/DEBUG/suricata.socket", sizeof(addr.sun_path));
	addr.sun_path[sizeof(addr.sun_path) - 1] = 0;

	ret = connect(sck, (struct sockaddr *) &addr, sizeof(addr));
	if (ret == -1) 
	{
		char* er = strerror(errno);
		printf("Can not connect to socket: %s\n", strerror(errno));
		exit(-1);
	}

	ret = send(sck, VERSION_MSG, strlen(VERSION_MSG), 0);
	if (ret == -1) 
	{
		printf("Can't send error: %s\n", strerror(errno));
		exit(-1);
	} else if (ret < strlen(VERSION_MSG)) 
	{
		printf("Error send version\n");
		exit(-1);
	}

	memset(buffer, 0, sizeof(buffer));
	ret = read(sck, buffer, sizeof(buffer));
	if (ret == -1) 
	{
		printf("Can't read answer: %s\n", strerror(errno));
		exit(-1);
	}

	printf("Buffer: %s.\n", buffer);


	memset(buffer, 0, sizeof(buffer));
	ret = snprintf(buffer, sizeof(buffer) - 1,
		"{ \"command\": \"reload-rules\" }");

	if (ret < 0) 
	{
		printf("Can not create message: %s\n", strerror(errno));
		return 0;
	} else if (ret == sizeof(buffer) - 1) {
		printf("Write buffer too small");
		return 0;
	}

	ret = send(sck, buffer, strlen(buffer), 0);
	if (ret == -1) 
	{
		printf("Can not send info: %s\n", strerror(errno));
		return 0;
	} else if (ret < strlen(VERSION_MSG)) 
	{
		printf("Unable to send all message\n");
		return 0;
	}

	usleep(100 * 1000);
	memset(buffer, 0, sizeof(buffer));
	ret = read(sck, buffer, sizeof(buffer));
	if (ret == -1) 
	{
		printf("Can not read answer: %s\n", strerror(errno));
		return 0;
	}

	printf("Buffer: %s.\n", buffer);


}



/* error handlers for the whole program */
EXEC SQL WHENEVER SQLERROR CALL die();
EXEC SQL WHENEVER NOT FOUND DO BREAK;
 
static void die(void)
{
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	fprintf(stderr, "database error %s:n%sn", sqlca.sqlstate, sqlca.sqlerrm.sqlerrmc);
 
	EXEC SQL ROLLBACK;
	EXEC SQL DISCONNECT;
 
	exit(1);
 
	EXEC SQL WHENEVER SQLERROR CALL die(); // восстановить обработчик
}

int main(int argc, char **argv)
{
	EXEC SQL BEGIN DECLARE SECTION;
        int v_key, v_val_ind;
        char v_val[PIPE_SIZE];
	EXEC SQL END DECLARE SECTION;
 
	EXEC SQL DECLARE cusor CURSOR FOR
		SELECT rule_id, rule
		FROM maintable;

    EXEC SQL BEGIN DECLARE SECTION;
        char *dbname     = "suricata_db";  
        char *user       = "postgres";  
        char *connection = "unix:postgresql://localhost:5432/maintable";
        char ver[256];                  
    EXEC SQL END DECLARE SECTION;
    EXEC SQL CONNECT TO :dbname USER :user;

	EXEC SQL OPEN cusor; // курсор

	// signal(SIGPIPE, SIG_IGN);

    int fd_filo=0; // файловый для пайпа
	char buf[PIPE_SIZE];
	unlink(PIPE_NAME); // закрыть перед созданием и открытием
    if ( mkfifo(PIPE_NAME, 0777)) 
    {
		DEBUG_PRINT("%s is not created\n", PIPE_NAME);
        perror("mkfifo");
        // return 1;
    }

    DEBUG_PRINT("%s is created\n", PIPE_NAME);
	signal(SIGPIPE, SIG_IGN);

	int fd_filor=0;
	// открываю на чтение
    if ( (fd_filor = open(PIPE_NAME, O_RDONLY  | O_NONBLOCK, 0777)) <= 0 ) 
	{
		perror("do not open for read");
		DEBUG_PRINT("%s dont open\n", PIPE_NAME);
        return 2;
    }

	// открываю на запись 
    if ( (fd_filo = open(PIPE_NAME, O_WRONLY, 0777)) <= 0 ) 
    // if ( (fd_filo = open(PIPE_NAME, O_WRONLY, 0777)) <= 0 ) 
    {
		if (errno == ENXIO) //ENXIO
			fprintf(stderr, "%s\n", "open fifo for write error, open the other side for reading");
        perror("open fifo for write error, open the other side for reading\n");
		DEBUG_PRINT("%s: %s", PIPE_NAME, " open fifo for write error, open the other side for reading\n");
        return 2;
    }
    DEBUG_PRINT("%s is opened\n", PIPE_NAME);
	memset(v_val, '\0', PIPE_SIZE);
	for(;;)
	{
		EXEC SQL FETCH NEXT FROM cusor INTO :v_key, :v_val;
		v_val[strlen(v_val)]='\n';
 		write(fd_filo, v_val, strlen(v_val)); // lengt + \n
		DEBUG_PRINT( "%d::   %s\n\n",v_key, v_val);
		memset(v_val, '\0', PIPE_SIZE);
	}
	
	reload();

	unlink(PIPE_NAME); 
	DEBUG_PRINT("END WRITE TO FIFO");
	EXEC SQL CLOSE cusor;
	EXEC SQL COMMIT;
	EXEC SQL DISCONNECT;
	close(fd_filor);	
	close(fd_filo);
	return 0;
}